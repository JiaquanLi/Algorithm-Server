// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: route_guide.proto

#ifndef PROTOBUF_INCLUDED_route_5fguide_2eproto
#define PROTOBUF_INCLUDED_route_5fguide_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_route_5fguide_2eproto 

namespace protobuf_route_5fguide_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[9];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_route_5fguide_2eproto
namespace routeguide {
class IcpMaxIterationsReply;
class IcpMaxIterationsReplyDefaultTypeInternal;
extern IcpMaxIterationsReplyDefaultTypeInternal _IcpMaxIterationsReply_default_instance_;
class IcpMaxIterationsRequest;
class IcpMaxIterationsRequestDefaultTypeInternal;
extern IcpMaxIterationsRequestDefaultTypeInternal _IcpMaxIterationsRequest_default_instance_;
class LisenceInfoReply;
class LisenceInfoReplyDefaultTypeInternal;
extern LisenceInfoReplyDefaultTypeInternal _LisenceInfoReply_default_instance_;
class LisenceInfoRequest;
class LisenceInfoRequestDefaultTypeInternal;
extern LisenceInfoRequestDefaultTypeInternal _LisenceInfoRequest_default_instance_;
class RouteNote;
class RouteNoteDefaultTypeInternal;
extern RouteNoteDefaultTypeInternal _RouteNote_default_instance_;
class ServerInfoReply;
class ServerInfoReplyDefaultTypeInternal;
extern ServerInfoReplyDefaultTypeInternal _ServerInfoReply_default_instance_;
class ServerInfoRequest;
class ServerInfoRequestDefaultTypeInternal;
extern ServerInfoRequestDefaultTypeInternal _ServerInfoRequest_default_instance_;
class TempletFileReply;
class TempletFileReplyDefaultTypeInternal;
extern TempletFileReplyDefaultTypeInternal _TempletFileReply_default_instance_;
class TempletFileRequest;
class TempletFileRequestDefaultTypeInternal;
extern TempletFileRequestDefaultTypeInternal _TempletFileRequest_default_instance_;
}  // namespace routeguide
namespace google {
namespace protobuf {
template<> ::routeguide::IcpMaxIterationsReply* Arena::CreateMaybeMessage<::routeguide::IcpMaxIterationsReply>(Arena*);
template<> ::routeguide::IcpMaxIterationsRequest* Arena::CreateMaybeMessage<::routeguide::IcpMaxIterationsRequest>(Arena*);
template<> ::routeguide::LisenceInfoReply* Arena::CreateMaybeMessage<::routeguide::LisenceInfoReply>(Arena*);
template<> ::routeguide::LisenceInfoRequest* Arena::CreateMaybeMessage<::routeguide::LisenceInfoRequest>(Arena*);
template<> ::routeguide::RouteNote* Arena::CreateMaybeMessage<::routeguide::RouteNote>(Arena*);
template<> ::routeguide::ServerInfoReply* Arena::CreateMaybeMessage<::routeguide::ServerInfoReply>(Arena*);
template<> ::routeguide::ServerInfoRequest* Arena::CreateMaybeMessage<::routeguide::ServerInfoRequest>(Arena*);
template<> ::routeguide::TempletFileReply* Arena::CreateMaybeMessage<::routeguide::TempletFileReply>(Arena*);
template<> ::routeguide::TempletFileRequest* Arena::CreateMaybeMessage<::routeguide::TempletFileRequest>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace routeguide {

// ===================================================================

class RouteNote : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:routeguide.RouteNote) */ {
 public:
  RouteNote();
  virtual ~RouteNote();

  RouteNote(const RouteNote& from);

  inline RouteNote& operator=(const RouteNote& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RouteNote(RouteNote&& from) noexcept
    : RouteNote() {
    *this = ::std::move(from);
  }

  inline RouteNote& operator=(RouteNote&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RouteNote& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RouteNote* internal_default_instance() {
    return reinterpret_cast<const RouteNote*>(
               &_RouteNote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(RouteNote* other);
  friend void swap(RouteNote& a, RouteNote& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RouteNote* New() const final {
    return CreateMaybeMessage<RouteNote>(NULL);
  }

  RouteNote* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RouteNote>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RouteNote& from);
  void MergeFrom(const RouteNote& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RouteNote* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes datasend = 1;
  void clear_datasend();
  static const int kDatasendFieldNumber = 1;
  const ::std::string& datasend() const;
  void set_datasend(const ::std::string& value);
  #if LANG_CXX11
  void set_datasend(::std::string&& value);
  #endif
  void set_datasend(const char* value);
  void set_datasend(const void* value, size_t size);
  ::std::string* mutable_datasend();
  ::std::string* release_datasend();
  void set_allocated_datasend(::std::string* datasend);

  // int32 size = 2;
  void clear_size();
  static const int kSizeFieldNumber = 2;
  ::google::protobuf::int32 size() const;
  void set_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:routeguide.RouteNote)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr datasend_;
  ::google::protobuf::int32 size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_route_5fguide_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TempletFileRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:routeguide.TempletFileRequest) */ {
 public:
  TempletFileRequest();
  virtual ~TempletFileRequest();

  TempletFileRequest(const TempletFileRequest& from);

  inline TempletFileRequest& operator=(const TempletFileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TempletFileRequest(TempletFileRequest&& from) noexcept
    : TempletFileRequest() {
    *this = ::std::move(from);
  }

  inline TempletFileRequest& operator=(TempletFileRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TempletFileRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TempletFileRequest* internal_default_instance() {
    return reinterpret_cast<const TempletFileRequest*>(
               &_TempletFileRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(TempletFileRequest* other);
  friend void swap(TempletFileRequest& a, TempletFileRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TempletFileRequest* New() const final {
    return CreateMaybeMessage<TempletFileRequest>(NULL);
  }

  TempletFileRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TempletFileRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TempletFileRequest& from);
  void MergeFrom(const TempletFileRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TempletFileRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes datasend = 1;
  void clear_datasend();
  static const int kDatasendFieldNumber = 1;
  const ::std::string& datasend() const;
  void set_datasend(const ::std::string& value);
  #if LANG_CXX11
  void set_datasend(::std::string&& value);
  #endif
  void set_datasend(const char* value);
  void set_datasend(const void* value, size_t size);
  ::std::string* mutable_datasend();
  ::std::string* release_datasend();
  void set_allocated_datasend(::std::string* datasend);

  // int32 size = 2;
  void clear_size();
  static const int kSizeFieldNumber = 2;
  ::google::protobuf::int32 size() const;
  void set_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:routeguide.TempletFileRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr datasend_;
  ::google::protobuf::int32 size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_route_5fguide_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TempletFileReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:routeguide.TempletFileReply) */ {
 public:
  TempletFileReply();
  virtual ~TempletFileReply();

  TempletFileReply(const TempletFileReply& from);

  inline TempletFileReply& operator=(const TempletFileReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TempletFileReply(TempletFileReply&& from) noexcept
    : TempletFileReply() {
    *this = ::std::move(from);
  }

  inline TempletFileReply& operator=(TempletFileReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TempletFileReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TempletFileReply* internal_default_instance() {
    return reinterpret_cast<const TempletFileReply*>(
               &_TempletFileReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(TempletFileReply* other);
  friend void swap(TempletFileReply& a, TempletFileReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TempletFileReply* New() const final {
    return CreateMaybeMessage<TempletFileReply>(NULL);
  }

  TempletFileReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TempletFileReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TempletFileReply& from);
  void MergeFrom(const TempletFileReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TempletFileReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool retsts = 1;
  void clear_retsts();
  static const int kRetstsFieldNumber = 1;
  bool retsts() const;
  void set_retsts(bool value);

  // @@protoc_insertion_point(class_scope:routeguide.TempletFileReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool retsts_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_route_5fguide_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IcpMaxIterationsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:routeguide.IcpMaxIterationsRequest) */ {
 public:
  IcpMaxIterationsRequest();
  virtual ~IcpMaxIterationsRequest();

  IcpMaxIterationsRequest(const IcpMaxIterationsRequest& from);

  inline IcpMaxIterationsRequest& operator=(const IcpMaxIterationsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IcpMaxIterationsRequest(IcpMaxIterationsRequest&& from) noexcept
    : IcpMaxIterationsRequest() {
    *this = ::std::move(from);
  }

  inline IcpMaxIterationsRequest& operator=(IcpMaxIterationsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IcpMaxIterationsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IcpMaxIterationsRequest* internal_default_instance() {
    return reinterpret_cast<const IcpMaxIterationsRequest*>(
               &_IcpMaxIterationsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(IcpMaxIterationsRequest* other);
  friend void swap(IcpMaxIterationsRequest& a, IcpMaxIterationsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IcpMaxIterationsRequest* New() const final {
    return CreateMaybeMessage<IcpMaxIterationsRequest>(NULL);
  }

  IcpMaxIterationsRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IcpMaxIterationsRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const IcpMaxIterationsRequest& from);
  void MergeFrom(const IcpMaxIterationsRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IcpMaxIterationsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 maxiterations = 1;
  void clear_maxiterations();
  static const int kMaxiterationsFieldNumber = 1;
  ::google::protobuf::int32 maxiterations() const;
  void set_maxiterations(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:routeguide.IcpMaxIterationsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 maxiterations_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_route_5fguide_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IcpMaxIterationsReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:routeguide.IcpMaxIterationsReply) */ {
 public:
  IcpMaxIterationsReply();
  virtual ~IcpMaxIterationsReply();

  IcpMaxIterationsReply(const IcpMaxIterationsReply& from);

  inline IcpMaxIterationsReply& operator=(const IcpMaxIterationsReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IcpMaxIterationsReply(IcpMaxIterationsReply&& from) noexcept
    : IcpMaxIterationsReply() {
    *this = ::std::move(from);
  }

  inline IcpMaxIterationsReply& operator=(IcpMaxIterationsReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IcpMaxIterationsReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IcpMaxIterationsReply* internal_default_instance() {
    return reinterpret_cast<const IcpMaxIterationsReply*>(
               &_IcpMaxIterationsReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(IcpMaxIterationsReply* other);
  friend void swap(IcpMaxIterationsReply& a, IcpMaxIterationsReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IcpMaxIterationsReply* New() const final {
    return CreateMaybeMessage<IcpMaxIterationsReply>(NULL);
  }

  IcpMaxIterationsReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IcpMaxIterationsReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const IcpMaxIterationsReply& from);
  void MergeFrom(const IcpMaxIterationsReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IcpMaxIterationsReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool retsts = 1;
  void clear_retsts();
  static const int kRetstsFieldNumber = 1;
  bool retsts() const;
  void set_retsts(bool value);

  // @@protoc_insertion_point(class_scope:routeguide.IcpMaxIterationsReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool retsts_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_route_5fguide_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ServerInfoReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:routeguide.ServerInfoReply) */ {
 public:
  ServerInfoReply();
  virtual ~ServerInfoReply();

  ServerInfoReply(const ServerInfoReply& from);

  inline ServerInfoReply& operator=(const ServerInfoReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerInfoReply(ServerInfoReply&& from) noexcept
    : ServerInfoReply() {
    *this = ::std::move(from);
  }

  inline ServerInfoReply& operator=(ServerInfoReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerInfoReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerInfoReply* internal_default_instance() {
    return reinterpret_cast<const ServerInfoReply*>(
               &_ServerInfoReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(ServerInfoReply* other);
  friend void swap(ServerInfoReply& a, ServerInfoReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerInfoReply* New() const final {
    return CreateMaybeMessage<ServerInfoReply>(NULL);
  }

  ServerInfoReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ServerInfoReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ServerInfoReply& from);
  void MergeFrom(const ServerInfoReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerInfoReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string revsion = 1;
  void clear_revsion();
  static const int kRevsionFieldNumber = 1;
  const ::std::string& revsion() const;
  void set_revsion(const ::std::string& value);
  #if LANG_CXX11
  void set_revsion(::std::string&& value);
  #endif
  void set_revsion(const char* value);
  void set_revsion(const char* value, size_t size);
  ::std::string* mutable_revsion();
  ::std::string* release_revsion();
  void set_allocated_revsion(::std::string* revsion);

  // string builddate = 2;
  void clear_builddate();
  static const int kBuilddateFieldNumber = 2;
  const ::std::string& builddate() const;
  void set_builddate(const ::std::string& value);
  #if LANG_CXX11
  void set_builddate(::std::string&& value);
  #endif
  void set_builddate(const char* value);
  void set_builddate(const char* value, size_t size);
  ::std::string* mutable_builddate();
  ::std::string* release_builddate();
  void set_allocated_builddate(::std::string* builddate);

  // string complayname = 3;
  void clear_complayname();
  static const int kComplaynameFieldNumber = 3;
  const ::std::string& complayname() const;
  void set_complayname(const ::std::string& value);
  #if LANG_CXX11
  void set_complayname(::std::string&& value);
  #endif
  void set_complayname(const char* value);
  void set_complayname(const char* value, size_t size);
  ::std::string* mutable_complayname();
  ::std::string* release_complayname();
  void set_allocated_complayname(::std::string* complayname);

  // @@protoc_insertion_point(class_scope:routeguide.ServerInfoReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr revsion_;
  ::google::protobuf::internal::ArenaStringPtr builddate_;
  ::google::protobuf::internal::ArenaStringPtr complayname_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_route_5fguide_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ServerInfoRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:routeguide.ServerInfoRequest) */ {
 public:
  ServerInfoRequest();
  virtual ~ServerInfoRequest();

  ServerInfoRequest(const ServerInfoRequest& from);

  inline ServerInfoRequest& operator=(const ServerInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerInfoRequest(ServerInfoRequest&& from) noexcept
    : ServerInfoRequest() {
    *this = ::std::move(from);
  }

  inline ServerInfoRequest& operator=(ServerInfoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerInfoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerInfoRequest* internal_default_instance() {
    return reinterpret_cast<const ServerInfoRequest*>(
               &_ServerInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(ServerInfoRequest* other);
  friend void swap(ServerInfoRequest& a, ServerInfoRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerInfoRequest* New() const final {
    return CreateMaybeMessage<ServerInfoRequest>(NULL);
  }

  ServerInfoRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ServerInfoRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ServerInfoRequest& from);
  void MergeFrom(const ServerInfoRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerInfoRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message = 1;
  void clear_message();
  static const int kMessageFieldNumber = 1;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:routeguide.ServerInfoRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_route_5fguide_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LisenceInfoReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:routeguide.LisenceInfoReply) */ {
 public:
  LisenceInfoReply();
  virtual ~LisenceInfoReply();

  LisenceInfoReply(const LisenceInfoReply& from);

  inline LisenceInfoReply& operator=(const LisenceInfoReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LisenceInfoReply(LisenceInfoReply&& from) noexcept
    : LisenceInfoReply() {
    *this = ::std::move(from);
  }

  inline LisenceInfoReply& operator=(LisenceInfoReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LisenceInfoReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LisenceInfoReply* internal_default_instance() {
    return reinterpret_cast<const LisenceInfoReply*>(
               &_LisenceInfoReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(LisenceInfoReply* other);
  friend void swap(LisenceInfoReply& a, LisenceInfoReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LisenceInfoReply* New() const final {
    return CreateMaybeMessage<LisenceInfoReply>(NULL);
  }

  LisenceInfoReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LisenceInfoReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LisenceInfoReply& from);
  void MergeFrom(const LisenceInfoReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LisenceInfoReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message = 1;
  void clear_message();
  static const int kMessageFieldNumber = 1;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // bool statues = 2;
  void clear_statues();
  static const int kStatuesFieldNumber = 2;
  bool statues() const;
  void set_statues(bool value);

  // @@protoc_insertion_point(class_scope:routeguide.LisenceInfoReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  bool statues_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_route_5fguide_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LisenceInfoRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:routeguide.LisenceInfoRequest) */ {
 public:
  LisenceInfoRequest();
  virtual ~LisenceInfoRequest();

  LisenceInfoRequest(const LisenceInfoRequest& from);

  inline LisenceInfoRequest& operator=(const LisenceInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LisenceInfoRequest(LisenceInfoRequest&& from) noexcept
    : LisenceInfoRequest() {
    *this = ::std::move(from);
  }

  inline LisenceInfoRequest& operator=(LisenceInfoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LisenceInfoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LisenceInfoRequest* internal_default_instance() {
    return reinterpret_cast<const LisenceInfoRequest*>(
               &_LisenceInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(LisenceInfoRequest* other);
  friend void swap(LisenceInfoRequest& a, LisenceInfoRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LisenceInfoRequest* New() const final {
    return CreateMaybeMessage<LisenceInfoRequest>(NULL);
  }

  LisenceInfoRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LisenceInfoRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LisenceInfoRequest& from);
  void MergeFrom(const LisenceInfoRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LisenceInfoRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string clientLicense = 1;
  void clear_clientlicense();
  static const int kClientLicenseFieldNumber = 1;
  const ::std::string& clientlicense() const;
  void set_clientlicense(const ::std::string& value);
  #if LANG_CXX11
  void set_clientlicense(::std::string&& value);
  #endif
  void set_clientlicense(const char* value);
  void set_clientlicense(const char* value, size_t size);
  ::std::string* mutable_clientlicense();
  ::std::string* release_clientlicense();
  void set_allocated_clientlicense(::std::string* clientlicense);

  // @@protoc_insertion_point(class_scope:routeguide.LisenceInfoRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr clientlicense_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_route_5fguide_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RouteNote

// bytes datasend = 1;
inline void RouteNote::clear_datasend() {
  datasend_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RouteNote::datasend() const {
  // @@protoc_insertion_point(field_get:routeguide.RouteNote.datasend)
  return datasend_.GetNoArena();
}
inline void RouteNote::set_datasend(const ::std::string& value) {
  
  datasend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:routeguide.RouteNote.datasend)
}
#if LANG_CXX11
inline void RouteNote::set_datasend(::std::string&& value) {
  
  datasend_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:routeguide.RouteNote.datasend)
}
#endif
inline void RouteNote::set_datasend(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  datasend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:routeguide.RouteNote.datasend)
}
inline void RouteNote::set_datasend(const void* value, size_t size) {
  
  datasend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:routeguide.RouteNote.datasend)
}
inline ::std::string* RouteNote::mutable_datasend() {
  
  // @@protoc_insertion_point(field_mutable:routeguide.RouteNote.datasend)
  return datasend_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RouteNote::release_datasend() {
  // @@protoc_insertion_point(field_release:routeguide.RouteNote.datasend)
  
  return datasend_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RouteNote::set_allocated_datasend(::std::string* datasend) {
  if (datasend != NULL) {
    
  } else {
    
  }
  datasend_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), datasend);
  // @@protoc_insertion_point(field_set_allocated:routeguide.RouteNote.datasend)
}

// int32 size = 2;
inline void RouteNote::clear_size() {
  size_ = 0;
}
inline ::google::protobuf::int32 RouteNote::size() const {
  // @@protoc_insertion_point(field_get:routeguide.RouteNote.size)
  return size_;
}
inline void RouteNote::set_size(::google::protobuf::int32 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:routeguide.RouteNote.size)
}

// -------------------------------------------------------------------

// TempletFileRequest

// bytes datasend = 1;
inline void TempletFileRequest::clear_datasend() {
  datasend_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TempletFileRequest::datasend() const {
  // @@protoc_insertion_point(field_get:routeguide.TempletFileRequest.datasend)
  return datasend_.GetNoArena();
}
inline void TempletFileRequest::set_datasend(const ::std::string& value) {
  
  datasend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:routeguide.TempletFileRequest.datasend)
}
#if LANG_CXX11
inline void TempletFileRequest::set_datasend(::std::string&& value) {
  
  datasend_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:routeguide.TempletFileRequest.datasend)
}
#endif
inline void TempletFileRequest::set_datasend(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  datasend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:routeguide.TempletFileRequest.datasend)
}
inline void TempletFileRequest::set_datasend(const void* value, size_t size) {
  
  datasend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:routeguide.TempletFileRequest.datasend)
}
inline ::std::string* TempletFileRequest::mutable_datasend() {
  
  // @@protoc_insertion_point(field_mutable:routeguide.TempletFileRequest.datasend)
  return datasend_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TempletFileRequest::release_datasend() {
  // @@protoc_insertion_point(field_release:routeguide.TempletFileRequest.datasend)
  
  return datasend_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TempletFileRequest::set_allocated_datasend(::std::string* datasend) {
  if (datasend != NULL) {
    
  } else {
    
  }
  datasend_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), datasend);
  // @@protoc_insertion_point(field_set_allocated:routeguide.TempletFileRequest.datasend)
}

// int32 size = 2;
inline void TempletFileRequest::clear_size() {
  size_ = 0;
}
inline ::google::protobuf::int32 TempletFileRequest::size() const {
  // @@protoc_insertion_point(field_get:routeguide.TempletFileRequest.size)
  return size_;
}
inline void TempletFileRequest::set_size(::google::protobuf::int32 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:routeguide.TempletFileRequest.size)
}

// -------------------------------------------------------------------

// TempletFileReply

// bool retsts = 1;
inline void TempletFileReply::clear_retsts() {
  retsts_ = false;
}
inline bool TempletFileReply::retsts() const {
  // @@protoc_insertion_point(field_get:routeguide.TempletFileReply.retsts)
  return retsts_;
}
inline void TempletFileReply::set_retsts(bool value) {
  
  retsts_ = value;
  // @@protoc_insertion_point(field_set:routeguide.TempletFileReply.retsts)
}

// -------------------------------------------------------------------

// IcpMaxIterationsRequest

// int32 maxiterations = 1;
inline void IcpMaxIterationsRequest::clear_maxiterations() {
  maxiterations_ = 0;
}
inline ::google::protobuf::int32 IcpMaxIterationsRequest::maxiterations() const {
  // @@protoc_insertion_point(field_get:routeguide.IcpMaxIterationsRequest.maxiterations)
  return maxiterations_;
}
inline void IcpMaxIterationsRequest::set_maxiterations(::google::protobuf::int32 value) {
  
  maxiterations_ = value;
  // @@protoc_insertion_point(field_set:routeguide.IcpMaxIterationsRequest.maxiterations)
}

// -------------------------------------------------------------------

// IcpMaxIterationsReply

// bool retsts = 1;
inline void IcpMaxIterationsReply::clear_retsts() {
  retsts_ = false;
}
inline bool IcpMaxIterationsReply::retsts() const {
  // @@protoc_insertion_point(field_get:routeguide.IcpMaxIterationsReply.retsts)
  return retsts_;
}
inline void IcpMaxIterationsReply::set_retsts(bool value) {
  
  retsts_ = value;
  // @@protoc_insertion_point(field_set:routeguide.IcpMaxIterationsReply.retsts)
}

// -------------------------------------------------------------------

// ServerInfoReply

// string revsion = 1;
inline void ServerInfoReply::clear_revsion() {
  revsion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServerInfoReply::revsion() const {
  // @@protoc_insertion_point(field_get:routeguide.ServerInfoReply.revsion)
  return revsion_.GetNoArena();
}
inline void ServerInfoReply::set_revsion(const ::std::string& value) {
  
  revsion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:routeguide.ServerInfoReply.revsion)
}
#if LANG_CXX11
inline void ServerInfoReply::set_revsion(::std::string&& value) {
  
  revsion_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:routeguide.ServerInfoReply.revsion)
}
#endif
inline void ServerInfoReply::set_revsion(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  revsion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:routeguide.ServerInfoReply.revsion)
}
inline void ServerInfoReply::set_revsion(const char* value, size_t size) {
  
  revsion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:routeguide.ServerInfoReply.revsion)
}
inline ::std::string* ServerInfoReply::mutable_revsion() {
  
  // @@protoc_insertion_point(field_mutable:routeguide.ServerInfoReply.revsion)
  return revsion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerInfoReply::release_revsion() {
  // @@protoc_insertion_point(field_release:routeguide.ServerInfoReply.revsion)
  
  return revsion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerInfoReply::set_allocated_revsion(::std::string* revsion) {
  if (revsion != NULL) {
    
  } else {
    
  }
  revsion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), revsion);
  // @@protoc_insertion_point(field_set_allocated:routeguide.ServerInfoReply.revsion)
}

// string builddate = 2;
inline void ServerInfoReply::clear_builddate() {
  builddate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServerInfoReply::builddate() const {
  // @@protoc_insertion_point(field_get:routeguide.ServerInfoReply.builddate)
  return builddate_.GetNoArena();
}
inline void ServerInfoReply::set_builddate(const ::std::string& value) {
  
  builddate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:routeguide.ServerInfoReply.builddate)
}
#if LANG_CXX11
inline void ServerInfoReply::set_builddate(::std::string&& value) {
  
  builddate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:routeguide.ServerInfoReply.builddate)
}
#endif
inline void ServerInfoReply::set_builddate(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  builddate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:routeguide.ServerInfoReply.builddate)
}
inline void ServerInfoReply::set_builddate(const char* value, size_t size) {
  
  builddate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:routeguide.ServerInfoReply.builddate)
}
inline ::std::string* ServerInfoReply::mutable_builddate() {
  
  // @@protoc_insertion_point(field_mutable:routeguide.ServerInfoReply.builddate)
  return builddate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerInfoReply::release_builddate() {
  // @@protoc_insertion_point(field_release:routeguide.ServerInfoReply.builddate)
  
  return builddate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerInfoReply::set_allocated_builddate(::std::string* builddate) {
  if (builddate != NULL) {
    
  } else {
    
  }
  builddate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), builddate);
  // @@protoc_insertion_point(field_set_allocated:routeguide.ServerInfoReply.builddate)
}

// string complayname = 3;
inline void ServerInfoReply::clear_complayname() {
  complayname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServerInfoReply::complayname() const {
  // @@protoc_insertion_point(field_get:routeguide.ServerInfoReply.complayname)
  return complayname_.GetNoArena();
}
inline void ServerInfoReply::set_complayname(const ::std::string& value) {
  
  complayname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:routeguide.ServerInfoReply.complayname)
}
#if LANG_CXX11
inline void ServerInfoReply::set_complayname(::std::string&& value) {
  
  complayname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:routeguide.ServerInfoReply.complayname)
}
#endif
inline void ServerInfoReply::set_complayname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  complayname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:routeguide.ServerInfoReply.complayname)
}
inline void ServerInfoReply::set_complayname(const char* value, size_t size) {
  
  complayname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:routeguide.ServerInfoReply.complayname)
}
inline ::std::string* ServerInfoReply::mutable_complayname() {
  
  // @@protoc_insertion_point(field_mutable:routeguide.ServerInfoReply.complayname)
  return complayname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerInfoReply::release_complayname() {
  // @@protoc_insertion_point(field_release:routeguide.ServerInfoReply.complayname)
  
  return complayname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerInfoReply::set_allocated_complayname(::std::string* complayname) {
  if (complayname != NULL) {
    
  } else {
    
  }
  complayname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), complayname);
  // @@protoc_insertion_point(field_set_allocated:routeguide.ServerInfoReply.complayname)
}

// -------------------------------------------------------------------

// ServerInfoRequest

// string message = 1;
inline void ServerInfoRequest::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServerInfoRequest::message() const {
  // @@protoc_insertion_point(field_get:routeguide.ServerInfoRequest.message)
  return message_.GetNoArena();
}
inline void ServerInfoRequest::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:routeguide.ServerInfoRequest.message)
}
#if LANG_CXX11
inline void ServerInfoRequest::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:routeguide.ServerInfoRequest.message)
}
#endif
inline void ServerInfoRequest::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:routeguide.ServerInfoRequest.message)
}
inline void ServerInfoRequest::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:routeguide.ServerInfoRequest.message)
}
inline ::std::string* ServerInfoRequest::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:routeguide.ServerInfoRequest.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerInfoRequest::release_message() {
  // @@protoc_insertion_point(field_release:routeguide.ServerInfoRequest.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerInfoRequest::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:routeguide.ServerInfoRequest.message)
}

// -------------------------------------------------------------------

// LisenceInfoReply

// string message = 1;
inline void LisenceInfoReply::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LisenceInfoReply::message() const {
  // @@protoc_insertion_point(field_get:routeguide.LisenceInfoReply.message)
  return message_.GetNoArena();
}
inline void LisenceInfoReply::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:routeguide.LisenceInfoReply.message)
}
#if LANG_CXX11
inline void LisenceInfoReply::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:routeguide.LisenceInfoReply.message)
}
#endif
inline void LisenceInfoReply::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:routeguide.LisenceInfoReply.message)
}
inline void LisenceInfoReply::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:routeguide.LisenceInfoReply.message)
}
inline ::std::string* LisenceInfoReply::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:routeguide.LisenceInfoReply.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LisenceInfoReply::release_message() {
  // @@protoc_insertion_point(field_release:routeguide.LisenceInfoReply.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LisenceInfoReply::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:routeguide.LisenceInfoReply.message)
}

// bool statues = 2;
inline void LisenceInfoReply::clear_statues() {
  statues_ = false;
}
inline bool LisenceInfoReply::statues() const {
  // @@protoc_insertion_point(field_get:routeguide.LisenceInfoReply.statues)
  return statues_;
}
inline void LisenceInfoReply::set_statues(bool value) {
  
  statues_ = value;
  // @@protoc_insertion_point(field_set:routeguide.LisenceInfoReply.statues)
}

// -------------------------------------------------------------------

// LisenceInfoRequest

// string clientLicense = 1;
inline void LisenceInfoRequest::clear_clientlicense() {
  clientlicense_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LisenceInfoRequest::clientlicense() const {
  // @@protoc_insertion_point(field_get:routeguide.LisenceInfoRequest.clientLicense)
  return clientlicense_.GetNoArena();
}
inline void LisenceInfoRequest::set_clientlicense(const ::std::string& value) {
  
  clientlicense_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:routeguide.LisenceInfoRequest.clientLicense)
}
#if LANG_CXX11
inline void LisenceInfoRequest::set_clientlicense(::std::string&& value) {
  
  clientlicense_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:routeguide.LisenceInfoRequest.clientLicense)
}
#endif
inline void LisenceInfoRequest::set_clientlicense(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  clientlicense_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:routeguide.LisenceInfoRequest.clientLicense)
}
inline void LisenceInfoRequest::set_clientlicense(const char* value, size_t size) {
  
  clientlicense_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:routeguide.LisenceInfoRequest.clientLicense)
}
inline ::std::string* LisenceInfoRequest::mutable_clientlicense() {
  
  // @@protoc_insertion_point(field_mutable:routeguide.LisenceInfoRequest.clientLicense)
  return clientlicense_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LisenceInfoRequest::release_clientlicense() {
  // @@protoc_insertion_point(field_release:routeguide.LisenceInfoRequest.clientLicense)
  
  return clientlicense_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LisenceInfoRequest::set_allocated_clientlicense(::std::string* clientlicense) {
  if (clientlicense != NULL) {
    
  } else {
    
  }
  clientlicense_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientlicense);
  // @@protoc_insertion_point(field_set_allocated:routeguide.LisenceInfoRequest.clientLicense)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace routeguide

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_route_5fguide_2eproto
